Directory structure:
└── SnapNews/
    ├── README.md
    ├── eslint.config.js
    ├── index.html
    ├── package.json
    ├── vite.config.js
    ├── public/
    └── src/
        ├── App.css
        ├── App.jsx
        ├── index.css
        ├── main.jsx
        ├── assets/
        ├── components/
        │   ├── CategoryBar.jsx
        │   ├── Navbar.jsx
        │   └── NewsCard.jsx
        ├── contexts/
        │   └── BookmarkContext.jsx
        ├── pages/
        │   ├── BookmarksPage.jsx
        │   ├── HomePage.jsx
        │   └── NewsDetailPage.jsx
        ├── routes/
        │   └── routes.jsx
        ├── styles/
        │   ├── global.css
        │   └── themes.css
        └── utils/
            └── api.jsx

================================================
File: README.md
================================================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript and enable type-aware lint rules. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
# SnapNews



================================================
File: eslint.config.js
================================================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]



================================================
File: index.html
================================================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>



================================================
File: package.json
================================================
{
  "name": "snap-news",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@heroicons/react": "^2.2.0",
    "axios": "^1.8.4",
    "install": "^0.13.0",
    "npm": "^11.2.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.4.1",
    "tailwindcss": "^4.0.17"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "vite": "^6.2.0"
  }
}



================================================
File: vite.config.js
================================================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})




================================================
File: src/App.css
================================================



================================================
File: src/App.jsx
================================================
import { useState } from "react";
import "./App.css";
import AppRoutes from "./routes/routes";
import { BookmarkProvider } from "./contexts/BookmarkContext";

function App() {
  const [count, setCount] = useState(0);

  return (
    <>
      <BookmarkProvider>
        <AppRoutes />
      </BookmarkProvider>
    </>
  );
}

export default App;



================================================
File: src/index.css
================================================
@import "./styles/global.css";
@import "./styles/themes.css";



================================================
File: src/main.jsx
================================================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)




================================================
File: src/components/CategoryBar.jsx
================================================
import React from "react";

const categories = [
  "general",
  "business",
  "entertainment",
  "health",
  "science",
  "sports",
  "technology",
];

const CategoryBar = ({ setCategory }) => {
  return (
    <div className="category-bar">
      {categories.map((cat) => (
        <button key={cat} onClick={() => setCategory(cat)}>
          {cat.charAt(0).toUpperCase() + cat.slice(1)}
        </button>
      ))}
    </div>
  );
};

export default CategoryBar;



================================================
File: src/components/Navbar.jsx
================================================
import { Link } from "react-router-dom";
import { useState, useEffect } from "react";
import React from "react";

const Navbar = () => {
  const [theme, setTheme] = useState(localStorage.getItem("theme") || "light");

  useEffect(() => {
    document.documentElement.setAttribute("data-theme", theme);
    localStorage.setItem("theme", theme);
  }, [theme]);

  const toggleTheme = () => {
    setTheme(theme === "light" ? "dark" : "light");
  };

  return (
    <nav className="navbar">
      <div className="container navbar-content">
        <Link to="/" className="logo">
          📰 Snap News
        </Link>
        <div className="nav-links">
          <Link to="/" className="nav-item">
            Home
          </Link>
          <Link to="/bookmarks" className="nav-item">
            Bookmarks
          </Link>
          <button onClick={toggleTheme} className="theme-button">
            <span className="theme-icon">
              {theme === "light" ? "🌙" : "☀️"}
            </span>
            {theme === "light" ? "Dark Mode" : "Light Mode"}
          </button>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;



================================================
File: src/components/NewsCard.jsx
================================================
import { Link } from "react-router-dom";
import { useBookmarks } from "../contexts/BookmarkContext";

const NewsCard = ({ article, index }) => {
  const { bookmarks, addBookmark, removeBookmark } = useBookmarks();
  const isBookmarked = bookmarks.some((item) => item.title === article.title);

  return (
    <div className="news-card">
      {article.urlToImage && (
        <img
          src={article.urlToImage}
          alt={article.title}
          className="news-image"
        />
      )}
      <div className="news-content">
        <h3 className="news-title">{article.title}</h3>
        <p className="news-description">
          {article.description?.slice(0, 120)}...
        </p>
        <div className="news-footer">
          <Link to={`/news/${index}`} className="read-more">
            Read More →
          </Link>
          <button
            onClick={() =>
              isBookmarked ? removeBookmark(article) : addBookmark(article)
            }
            className={`bookmark-btn ${isBookmarked ? "bookmarked" : ""}`}
          >
            {isBookmarked ? "❌ Remove" : "📌 Bookmark"}
          </button>
        </div>
      </div>
    </div>
  );
};

export default NewsCard;



================================================
File: src/contexts/BookmarkContext.jsx
================================================
import React, { createContext, useContext, useState, useEffect } from "react";

// Create context
const BookmarkContext = createContext();

// Provider component
export const BookmarkProvider = ({ children }) => {
  const [bookmarks, setBookmarks] = useState([]);

  useEffect(() => {
    const storedBookmarks = JSON.parse(localStorage.getItem("bookmarks")) || [];
    setBookmarks(storedBookmarks);
  }, []);

  useEffect(() => {
    localStorage.setItem("bookmarks", JSON.stringify(bookmarks));
  }, [bookmarks]);

  const addBookmark = (article) => setBookmarks((prev) => [...prev, article]);
  const removeBookmark = (article) =>
    setBookmarks((prev) => prev.filter((item) => item.title !== article.title));

  return (
    <BookmarkContext.Provider
      value={{ bookmarks, addBookmark, removeBookmark }}
    >
      {children}
    </BookmarkContext.Provider>
  );
};

// Custom hook for consuming context
export const useBookmarks = () => {
  return useContext(BookmarkContext);
};



================================================
File: src/pages/BookmarksPage.jsx
================================================
import React from "react";
import { useBookmarks } from "../contexts/BookmarkContext";

const BookmarksPage = () => {
  const { bookmarks, removeBookmark } = useBookmarks();

  return (
    <div className="bookmarks-page">
      <h1 className="page-title">📌 Bookmarked News</h1>
      {bookmarks.length === 0 ? (
        <p className="empty-message">No bookmarks yet!</p>
      ) : (
        <div className="bookmarks-grid">
          {bookmarks.map((article, index) => (
            <div key={index} className="bookmark-card">
              {article.urlToImage && (
                <img
                  src={article.urlToImage}
                  alt={article.title}
                  className="news-image"
                />
              )}
              <div className="bookmark-content">
                <h3 className="bookmark-title">{article.title}</h3>
                <p className="bookmark-description">
                  {article.description?.slice(0, 100)}...
                </p>
                <button
                  onClick={() => removeBookmark(article)}
                  className="remove-btn"
                >
                  ❌ Remove
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default BookmarksPage;



================================================
File: src/pages/HomePage.jsx
================================================
import React, { useEffect, useState } from "react";
import { fetchNews } from "../utils/api";
import NewsCard from "../components/NewsCard";
import CategoryBar from "../components/CategoryBar";

const HomePage = () => {
  const [news, setNews] = useState([]);
  const [category, setCategory] = useState("general");

  useEffect(() => {
    const loadNews = async () => {
      const articles = await fetchNews(category);
      setNews(articles);
    };
    loadNews();
  }, [category]);

  return (
    <div className="homepage">
      <CategoryBar setCategory={setCategory} />
      <div className="news-container">
        {news.map((article, index) => (
          <NewsCard key={index} article={article} index={index} />
        ))}
      </div>
    </div>
  );
};

export default HomePage;



================================================
File: src/pages/NewsDetailPage.jsx
================================================
import { useParams } from "react-router-dom";
import { useEffect, useState } from "react";
import { fetchNews, fetchSummary } from "../utils/api";

const NewsDetailPage = () => {
  const { id } = useParams();
  const [news, setNews] = useState([]);
  const [article, setArticle] = useState(null);
  const [summary, setSummary] = useState("");
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const loadNews = async () => {
      const articles = await fetchNews("general"); // Fetch news articles
      setNews(articles);
      setArticle(articles[id]); // Get the specific article
    };
    loadNews();
  }, [id]);

  const handleQuickRead = async () => {
    if (!article) return;
    setLoading(true);
    const summarizedText = await fetchSummary(article.content);
    setSummary(summarizedText);
    setLoading(false);
  };

  if (!article) return <p className="loading">Loading news...</p>;

  return (
    <div className="news-detail">
      <img
        src={article.urlToImage}
        alt={article.title}
        className="detail-image"
      />
      <h1>{article.title}</h1>
      <p className="author-date">
        {article.author && <span>By {article.author}</span>} •{" "}
        {article.publishedAt?.split("T")[0]}
      </p>
      <p className="news-content">{summary || article.content}</p>
      <button onClick={handleQuickRead} className="quick-read">
        {loading ? "Summarizing..." : "Quick Read"}
      </button>
      <a
        href={article.url}
        target="_blank"
        rel="noopener noreferrer"
        className="full-article"
      >
        Read Full Article
      </a>
    </div>
  );
};

export default NewsDetailPage;



================================================
File: src/routes/routes.jsx
================================================
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import HomePage from "../pages/HomePage";
import NewsDetailPage from "../pages/NewsDetailPage";
import BookmarksPage from "../pages/BookmarksPage";
import Navbar from "../components/Navbar";

const AppRoutes = () => {
  return (
    <Router>
      <Navbar />
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/news/:id" element={<NewsDetailPage />} />
        <Route path="/bookmarks" element={<BookmarksPage />} />
      </Routes>
    </Router>
  );
};

export default AppRoutes;



================================================
File: src/styles/global.css
================================================
/*........................GLOBAL CSS.....................*/

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: var(--background-color);
  color: var(--text-color);
  transition: background-color 0.3s ease, color 0.3s ease;
}

.container {
  max-width: 1100px;
  margin: 0 auto;
  padding: 20px;
}

.card {
  background-color: var(--card-bg);
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
}

.card:hover {
  transform: translateY(-5px);
}

/*......................NAVBAR......................*/

/* Navbar Styles */
.navbar {
  background: var(--nav-bg);
  padding: 12px 20px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  position: sticky;
  top: 0;
  z-index: 1000;
}

/* Container */
.container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  max-width: 1200px;
  margin: auto;
}

/* Logo */
.logo {
  font-size: 22px;
  font-weight: bold;
  color: var(--text-color);
  text-decoration: none;
  transition: color 0.3s ease;
}

.logo:hover {
  color: var(--primary-color);
}

/* Navigation Links */
.nav-links {
  display: flex;
  align-items: center;
  gap: 20px;
}

.nav-item {
  font-size: 16px;
  text-decoration: none;
  color: var(--text-color);
  transition: color 0.3s ease;
}

.nav-item:hover {
  color: var(--primary-color);
}

/* Theme Toggle Button */
.theme-button {
  display: flex;
  align-items: center;
  gap: 8px;
  background: var(--button-bg);
  color: var(--button-text);
  padding: 8px 14px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 14px;
  transition: background 0.3s ease, transform 0.2s;
}

.theme-button:hover {
  background: var(--button-hover-bg);
  transform: scale(1.05);
}

.theme-icon {
  font-size: 18px;
}

/* Light & Dark Theme Variables */
:root {
  --nav-bg: #ffffff;
  --text-color: #333;
  --primary-color: #007bff;
  --button-bg: #f0f0f0;
  --button-hover-bg: #e0e0e0;
  --button-text: #333;
}

[data-theme="dark"] {
  --nav-bg: #222;
  --text-color: #fff;
  --primary-color: #ff9800;
  --button-bg: #333;
  --button-hover-bg: #444;
  --button-text: #fff;
}

/*...................News Card...............*/

.news-card {
  background: white;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease-in-out;
  width: 320px;
}

.news-card:hover {
  transform: translateY(-5px);
}

.news-image {
  width: 100%;
  height: 180px;
  object-fit: cover;
}

.news-content {
  padding: 15px;
}

.news-title {
  font-size: 18px;
  font-weight: bold;
  color: #333;
  margin-bottom: 8px;
}

.news-description {
  font-size: 14px;
  color: #666;
  margin-bottom: 10px;
}

.news-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.read-more {
  color: #007bff;
  text-decoration: none;
  font-weight: bold;
}

.read-more:hover {
  text-decoration: underline;
}

.bookmark-btn {
  background: #007bff;
  color: white;
  border: none;
  padding: 6px 12px;
  font-size: 14px;
  border-radius: 5px;
  cursor: pointer;
  transition: background 0.3s ease;
}

.bookmark-btn:hover {
  background: #0056b3;
}

.bookmark-btn.bookmarked {
  background: #dc3545;
}

.bookmark-btn.bookmarked:hover {
  background: #c82333;
}

/*.................News Detail..................*/
.news-detail {
  font-family: Arial, sans-serif;
  max-width: 900px;
  margin: 20px auto;
  padding: 20px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.detail-image {
  width: 100%;
  height: auto;
  border-radius: 8px;
}

h1 {
  font-size: 2rem;
  margin-top: 15px;
  color: #333;
}

.author-date {
  color: #555;
  font-size: 0.9rem;
  margin: 5px 0;
}

.news-category,
.news-sentiment,
.news-bias,
.news-headline,
.news-keywords {
  margin-top: 20px;
  font-size: 1rem;
  color: #333;
}

.news-content {
  margin-top: 20px;
  font-size: 1.1rem;
  line-height: 1.6;
  color: #333;
}

.button-wrapper {
  margin-top: 10px;
}

.analyze-btn,
.quick-read {
  padding: 12px 20px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
  font-size: 1rem;
  cursor: pointer;
  width: 100%;
  transition: background-color 0.3s;
}

.analyze-btn:disabled,
.quick-read:disabled {
  background-color: #bbb;
  cursor: not-allowed;
}

.analyze-btn:hover:not(:disabled),
.quick-read:hover:not(:disabled) {
  background-color: #0056b3;
}

.full-article {
  display: inline-block;
  margin-top: 20px;
  color: #007bff;
  font-weight: bold;
  text-decoration: none;
}

.full-article:hover {
  text-decoration: underline;
}

/*................Home Page.....................*/

.homepage {
  padding: 20px;
}

.news-container {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  justify-content: center;
}

/*.................Category Bar....................*/
.category-bar {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

.category-bar button {
  margin: 0 10px;
  padding: 10px 15px;
  border: none;
  background: #007bff;
  color: white;
  cursor: pointer;
  border-radius: 5px;
}

.category-bar button:hover {
  background: #0056b3;
}

/*.................Theme Toggle.......................*/
.theme-toggle {
  position: absolute;
  top: 10px;
  right: 10px;
  background: transparent;
  border: none;
  font-size: 18px;
  cursor: pointer;
}

.theme-toggle:hover {
  color: #007bff;
}

/*...................Bookmark page......................*/
.bookmarks-page {
  padding: 20px;
  max-width: 900px;
  margin: auto;
  text-align: center;
}

.page-title {
  font-size: 24px;
  color: #333;
  margin-bottom: 15px;
}

.empty-message {
  font-size: 16px;
  color: #777;
}

.bookmarks-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 20px;
  justify-content: center;
}

.bookmark-card {
  background: white;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease-in-out;
}

.bookmark-card:hover {
  transform: translateY(-5px);
}

.news-image {
  width: 100%;
  height: 160px;
  object-fit: cover;
}

.bookmark-content {
  padding: 15px;
}

.bookmark-title {
  font-size: 18px;
  font-weight: bold;
  color: #333;
  margin-bottom: 8px;
}

.bookmark-description {
  font-size: 14px;
  color: #666;
  margin-bottom: 10px;
}

.remove-btn {
  background: #dc3545;
  color: white;
  border: none;
  padding: 8px 12px;
  font-size: 14px;
  border-radius: 5px;
  cursor: pointer;
  transition: background 0.3s ease;
}

.remove-btn:hover {
  background: #c82333;
}



================================================
File: src/styles/themes.css
================================================
:root {
  --background-color: #ffffff;
  --text-color: #000000;
  --card-bg: #f5f5f5;
}

[data-theme="dark"] {
  --background-color: #1e1e1e;
  --text-color: #ffffff;
  --card-bg: #2a2a2a;
}



================================================
File: src/utils/api.jsx
================================================
const NEWS_API_KEY = "136141d5fa4b49ab8ee4dc060d4eef91";
const GEMINI_API_KEY = "AIzaSyDjjV4e0LnGFcxiznBdXIZX8vkrz-vpxwk";

export const fetchNews = async (category = "general") => {
  try {
    const response = await fetch(
      `https://newsapi.org/v2/top-headlines?country=us&category=${category}&apiKey=${NEWS_API_KEY}`
    );
    const data = await response.json();

    if (data.status !== "ok") {
      throw new Error("Error fetching news");
    }

    return data.articles;
  } catch (error) {
    console.error("Error fetching news:", error);
    return [];
  }
};

export const fetchSummary = async (content) => {
  try {
    // Updated endpoint using gemini-2.0-flash model from your curl example
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: `Please provide a concise summary of the following news article in a small paragraph of 200 words, highlighting the key points, major events, and important details:\n\n${content}`,
                },
              ],
            },
          ],
          // Optional configuration parameters
          generationConfig: {
            temperature: 0.4,
            maxOutputTokens: 1024,
          },
        }),
      }
    );

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error("API error details:", errorData);
      throw new Error(`API error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();

    if (data.candidates && data.candidates.length > 0) {
      return data.candidates[0].content.parts[0].text;
    } else if (data.promptFeedback && data.promptFeedback.blockReason) {
      throw new Error(`Content blocked: ${data.promptFeedback.blockReason}`);
    }

    throw new Error("Error generating summary");
  } catch (error) {
    console.error("Error summarizing article:", error);
    throw error;
  }
};


